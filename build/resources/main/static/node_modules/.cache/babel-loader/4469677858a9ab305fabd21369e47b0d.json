{"ast":null,"code":"'use strict';\n/* global setTimeout, clearTimeout */\n\nmodule.exports = function debounce(fn) {\n  var wait = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var lastCallAt = void 0;\n  var deferred = void 0;\n  var timer = void 0;\n  var pendingArgs = [];\n  return function debounced() {\n    var currentWait = getWait(wait);\n    var currentTime = new Date().getTime();\n    var isCold = !lastCallAt || currentTime - lastCallAt > currentWait;\n    lastCallAt = currentTime;\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    if (isCold && options.leading) {\n      return options.accumulate ? Promise.resolve(fn.call(this, [args])).then(function (result) {\n        return result[0];\n      }) : Promise.resolve(fn.call.apply(fn, [this].concat(args)));\n    }\n\n    if (deferred) {\n      clearTimeout(timer);\n    } else {\n      deferred = defer();\n    }\n\n    pendingArgs.push(args);\n    timer = setTimeout(flush.bind(this), currentWait);\n\n    if (options.accumulate) {\n      var argsIndex = pendingArgs.length - 1;\n      return deferred.promise.then(function (results) {\n        return results[argsIndex];\n      });\n    }\n\n    return deferred.promise;\n  };\n\n  function flush() {\n    var thisDeferred = deferred;\n    clearTimeout(timer);\n    Promise.resolve(options.accumulate ? fn.call(this, pendingArgs) : fn.apply(this, pendingArgs[pendingArgs.length - 1])).then(thisDeferred.resolve, thisDeferred.reject);\n    pendingArgs = [];\n    deferred = null;\n  }\n};\n\nfunction getWait(wait) {\n  return typeof wait === 'function' ? wait() : wait;\n}\n\nfunction defer() {\n  var deferred = {};\n  deferred.promise = new Promise(function (resolve, reject) {\n    deferred.resolve = resolve;\n    deferred.reject = reject;\n  });\n  return deferred;\n}","map":{"version":3,"sources":["../index.js"],"names":["module","wait","options","lastCallAt","deferred","timer","pendingArgs","args","currentWait","getWait","currentTime","isCold","fn","result","Promise","clearTimeout","defer","setTimeout","flush","argsIndex","results","thisDeferred"],"mappings":"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","sourcesContent":["/* global setTimeout, clearTimeout */\n\nmodule.exports = function debounce (fn, wait = 0, options = {}) {\n  let lastCallAt\n  let deferred\n  let timer\n  let pendingArgs = []\n  return function debounced (...args) {\n    const currentWait = getWait(wait)\n    const currentTime = new Date().getTime()\n\n    const isCold = !lastCallAt || (currentTime - lastCallAt) > currentWait\n\n    lastCallAt = currentTime\n\n    if (isCold && options.leading) {\n      return options.accumulate\n        ? Promise.resolve(fn.call(this, [args])).then(result => result[0])\n        : Promise.resolve(fn.call(this, ...args))\n    }\n\n    if (deferred) {\n      clearTimeout(timer)\n    } else {\n      deferred = defer()\n    }\n\n    pendingArgs.push(args)\n    timer = setTimeout(flush.bind(this), currentWait)\n\n    if (options.accumulate) {\n      const argsIndex = pendingArgs.length - 1\n      return deferred.promise.then(results => results[argsIndex])\n    }\n\n    return deferred.promise\n  }\n\n  function flush () {\n    const thisDeferred = deferred\n    clearTimeout(timer)\n\n    Promise.resolve(\n      options.accumulate\n        ? fn.call(this, pendingArgs)\n        : fn.apply(this, pendingArgs[pendingArgs.length - 1])\n    )\n      .then(thisDeferred.resolve, thisDeferred.reject)\n\n    pendingArgs = []\n    deferred = null\n  }\n}\n\nfunction getWait (wait) {\n  return (typeof wait === 'function') ? wait() : wait\n}\n\nfunction defer () {\n  const deferred = {}\n  deferred.promise = new Promise((resolve, reject) => {\n    deferred.resolve = resolve\n    deferred.reject = reject\n  })\n  return deferred\n}\n"]},"metadata":{},"sourceType":"script"}